// ------------------- Main info ------------------------------------------------------
//
// Light_pas extension ver 1.2
// written by pas 12-10-2012
// based on TinyBox2
//
// The library is written using javascript and prototype library.
// It is written for Magento stores, to avoid using jquery and possible errors with combining two js libraries.
//
// How to use?
//
// 1. Add these lines to product view head section (you can do it in local.xml file)
// <action method="addJs"><script>floor/tinybox.js</script></action>
// <action method="addItem"><type>skin_js</type><name>js/light_pas.js</name></action>
//
// 2. Be sure to have following settings in your media.phtml file
//
//      - class="<?php echo $items_counter?>_gallery subimglist" for gallery images (small ones)
//      - onclick="startChangingImagesParams('<?php echo $img_href_param;?>');" for gallery images (small ones)
//      Example:
//      <a class="<?php echo $items_counter?>_gallery subimglist" onclick="startChangingImagesParams('<?php echo $img_href_param;?>');"
//
//          $items_counter -> is passing the number of an image to the function, function knows how to handle with left and right
//          buttons then
//
//          subimglist is important, because the function knows what small image was clicked, and can build the array with elements
//
//
//
//      - main image should look like these:
//      Example:
//      <a  id="mainimage" rel="lightbox[example]" href="<?php echo $this->helper('catalog/image')->init($_product, 'image') ?>">
//         (an <img> in this <a> should have id="image" set)
//
//         mainimage is used to change a picture in main box
//         rel="lightbox[example]" -> this setting is very important, otherwise the observer will not start Tiny Box gallery window
//
// 3. You need to style the buttons, the id of the buttons are #tprev and #tnext
// 4. Be sure that main lightbox window generated by Tiny Box has an id="lightbox"
// 5. You may add extra button to start lightbox, the id of it should be id=lighbox-zoom-button
//
// ------------------------------------------------------------------------------------



// ------------------- Change log -----------------------------------------------------
//
// 05-11 2012 1.3 - change functionality of prev, next (avoid blinking), add some fade effects
//
// 15-10-2012 1.2 - Adding additional ability for extra button which starts lightbox as well
//
// 13-10-2012 1.1 - Moving to separate file, add comments, instructions, fixing default
//                  prevent action, fixing behaviour of left and right buttons
// 12-10-2012 1.0 - Writing the first version
//
// ------------------------------------------------------------------------------------



// ----------------- Default styles for buttons ---------------------------------------
//
// use this settings for the buttons, you may modify them, or write your own ones
// this is just a safe copy
//
//  #tnext, #tprev{
//      position: absolute;
//      top: 46%;
//      background-color: white;
//      padding: 2% 4%;
//      cursor: pointer;
//      @include border-radius(3px);
//      opacity: 0.95;
//      -moz-box-shadow: 0px 0px 10px #999;
//      -webkit-box-shadow: 0px 0px 10px #999;
//      box-shadow: 0px 0px 10px #999;
//      display: none;
//      font-weight: bold;
//      color: #007aaa;
//      -moz-text-shadow: 1px 1px #ceecf1;
//      -webkit-text-shadow: 1px 1px #ceecf1;
//      text-shadow: 1px 1px #ceecf1;
//  > span{
//          font-size: 16px;
//      }
//  &:hover{
//          -moz-text-shadow: -1px -1px #ceecf1;
//          -webkit-text-shadow: -1px -1px #ceecf1;
//          text-shadow: -1px -1px #ceecf1;
//      }
//  }
//  #tnext{
//      right: 0;
//  }
//  #tprev{
//      left: 0;
//  }
//
//  #lightbox{
//      max-width: 800px;
//      max-height: 600px;
//  .tcontent{
//          img{
//              max-width: 800px;
//              max-height: 600px;
//          }
//      }
//  }
// ------------------------------------------------------------------------------------



// ------------------- Global Variables and settings ----------------------------------

//lightbox switcher
//prevents several function starts
var globalLigthboxChecker = false;
// a counter for checking which image to load next
var aCounter = 0;
// this container holds every element which has subimglist class
var aContainer = [];
// holds the counter of an image from big box to use when another lightbox gallery starts
var holdTheMainBoxItemCounterValue = null;
// gets every a element in document as an array
var aElements= document.getElementsByTagName('a');

// -----------------------------------------------------------------------------------

/*
var spans = null;
var leftbutton = null;
var rightbutton = null;
*/


// ------------------- Global observer starts after dom loaded -----------------------
//
// Prevents default action for small images
//
document.observe("dom:loaded", function() {
    // remove default action from <a> tags holding small images (gallery)
    // prevent is in respond function
    $$('.subimglist').each(function(element) {
        element.observe('click', respond);
    })

    // read elements
    readElements();

    // read elements and add behavior for left and right buttons in big box
    // on product page
/*
    spans = document.getElementsByTagName('span');

    for(var i=0; i<spans.length; i++){
        var attrChecker = spans[i].readAttribute('class');
        if(attrChecker==null) continue;
        attrChecker = attrChecker.toString();
        if(attrChecker.indexOf('tleft')>=0){
            leftbutton = spans[i];
        }
        if(attrChecker.indexOf('tright')>=0){
            rightbutton = spans[i];
        }

    }

    rightbutton.addEventListener("click", function(){
        if(holdTheMainBoxItemCounterValue != null){
            aCounter = holdTheMainBoxItemCounterValue;
        }
        if(aCounter>=(aContainer.length-1)){
            document.getElementById('tnext').style.display='none';
            aCounter=aCounter;
        }else{
            aCounter++;
            holdTheMainBoxItemCounterValue = aCounter;
        }
        console.log("wcisnales w prawo, aCounter wynosi "+aCounter);

    }, false);

    leftbutton.addEventListener("click", function(){
        if(holdTheMainBoxItemCounterValue != null){
            aCounter = holdTheMainBoxItemCounterValue;
        }
        if(aCounter<=0){
            document.getElementById('tprev').style.display='none';
            aCounter=aCounter;
        }else{
            aCounter--;
            holdTheMainBoxItemCounterValue = aCounter;
        }
        console.log("wcisnales w lewo, aCounter wynosi "+aCounter);

    }, false);
*/

/*
    $$('.tright').invoke('observe','click',function(){
        if(holdTheMainBoxItemCounterValue != null){
            aCounter = holdTheMainBoxItemCounterValue;
        }
        if(aCounter>=(aContainer.length-1)){
            document.getElementById('tnext').style.display='none';
            aCounter=aCounter;
        }else{
            aCounter++;
            holdTheMainBoxItemCounterValue = aCounter;
        }
        console.log("wcisnales w prawo, aCounter wynosi "+aCounter);
    })

    $$('.tleft').invoke('observe','click',function(){
        if(holdTheMainBoxItemCounterValue != null){
            aCounter = holdTheMainBoxItemCounterValue;
        }
        if(aCounter<=0){
            document.getElementById('tprev').style.display='none';
            aCounter=aCounter;
        }else{
            aCounter--;
            holdTheMainBoxItemCounterValue = aCounter;
        }
        console.log("wcisnales w lewo, aCounter wynosi "+aCounter);
    })
*/


    // check clicked subimage (small one)
    // change a counter

    $$('.subimglist').invoke('observe','click',function(){
        var elementValue = $(this).getAttribute('class');
        elementValue = parseInt(elementValue);
        //aCounter is a global variable used for lightbox
        //it tells to the library which element will be showed next
        aCounter = elementValue;

        // holds the counter from big box
        // and use it after reloading the lightbox gallery
        holdTheMainBoxItemCounterValue = aCounter;
    })
});

// -----------------------------------------------------------------------------------



// ------------------ Ajax responders register ---------------------------------------
//
// Prevents default action for small images
//
Ajax.Responders.register({
    onComplete: function(transport) {
        $$('.subimglist').each(function(element) {
            element.observe('click', respond);
        })
        readElements();
        preloaderProductImages();
    }
});

// -----------------------------------------------------------------------------------


// ------------------- image preloader -----------------------------------------------
// preloads images

function preloaderProductImages(){
    var images = new Array();
    var lib = $$('.more-views a');
    for (i = 0; i < lib.length; i++) {
        images[i] = new Image()
        images[i].src = lib[i].href;
    }
}

// -----------------------------------------------------------------------------------


// ----------------- Document observer, holds settings after reloads -------------------

document.observe('click', function(e, el) {
    // remove default action from <a> tags holding small images (gallery)
    // prevent is in respond function
    // to be sure that default action is off, the function starts after every click
    $$('.subimglist').each(function(element) {
        element.observe('click', respond);
    })


    // check clicked subimage (small one)
    // change a counter



    $$('.subimglist').invoke('observe','click',function(){
        var elementValue = $(this).getAttribute('class');
        elementValue = parseInt(elementValue);
        //aCounter is a global variable used for lightbox
        //it tells to the library which element will be showed next
        aCounter = elementValue;

        // holds the counter from big box
        // and use it after reloading the lightbox gallery
        holdTheMainBoxItemCounterValue = aCounter;
    })


    if (el = e.findElement('[rel^=lightbox]')) {     // equivalent jquery's live()
        e.preventDefault();

        // use a proper image counter value after reloading the lightbox gallery
        // it is avoding the situation when the first and last image have two buttons
        aCounter = holdTheMainBoxItemCounterValue;

        // reads elements /images
        readElements();

        TINY.box.show({
            image:  $(el).readAttribute('href')
            ,boxid:'lightbox'
            ,animate:true
            // ,width:600
            // ,height:400
        })
        //check if function had already started
        //if so, it is not starting once again
        if(globalLigthboxChecker===false){
            enhanceLightboxGallery();
            globalLigthboxChecker = true;
            // checks the window size, and rescale lightbox for smaller screens if needed
            var checkWindowSize = getWindowHeight();
            if(checkWindowSize<800){
                $('lightbox').addClassName('lightbox-small-screens');
            }
        }else{
            checkACounter(aContainer.length);
        }
    }

    if (el = e.findElement('[id=lighbox-zoom-button]')){
        // this is doubled here and used for a rounded button to start gallery as well
        // if you want you may combine it with previous function but remember about prevent default there
        // use a proper image counter value after reloading the lightbox gallery
        // it is avoding the situation when the first and last image have two buttons
        aCounter = holdTheMainBoxItemCounterValue;

        // reads elements /images
        readElements();

        TINY.box.show({
            image:  $('mainimage').readAttribute('href')
            ,boxid:'lightbox'
            ,animate:true
            // ,width:600
            // ,height:400
        })
        //check if function had already started
        //if so, it is not starting once again
        if(globalLigthboxChecker===false){
            enhanceLightboxGallery();
            globalLigthboxChecker = true;
            // checks the window size, and rescale lightbox for smaller screens if needed
            var checkWindowSize = getWindowHeight();
            if(checkWindowSize<800){
                $('lightbox').addClassName('lightbox-small-screens');
            }
        }else{
            checkACounter(aContainer.length);
        }
    }
});

// -----------------------------------------------------------------------------------



// ---------- Stop default action for <a> tags with small images (gallery) -----------

// function for media events
// small images are <a> elements
// remove default action
function respond(event) {
    event.preventDefault();
}

// -----------------------------------------------------------------------------------



// ---- Change parameters for main image after clicking in small image----------------

// width and height is same as in media.phtml file
// change parameters for main image
// get the href from media.phtml
// for apropriate image
function startChangingImagesParams(param, param2){
    var movedclass = null;
    if(typeof(param2)==='undefined'){
        movedclass = null;
    }else{
        movedclass = param2;
    }

    var img = $('image');
    img.src = param;

    var imgObject = new Image();
    imgObject.src = param;

    var imgheight = imgObject.height;
    var imgwidth = imgObject.width;


/*
    if(imgheight<imgwidth){
        img.style.width = '100%';
        img.style.height = 'auto';
        img.style.marginTop = '30px';
        img.style.marginLeft = '0';
    }else if(imgheight>imgwidth){
        img.style.height = '100%';
        img.style.width = 'auto';
        img.style.marginLeft = '42px';
        img.style.marginTop = '0';
    }
    */
    //img.style.width = 'auto';
    //img.style.height = '398px';
    var mainImage = document.getElementById("mainimage");
    mainImage.setAttribute('href', param);
    mainImage.setAttribute('class', param2);
}

// -----------------------------------------------------------------------------------



// ---------------------- Main function ----------------------------------------------
//
// Basically it is collecting every <a> element and checking if a class name is .subimglist
// Every element of this class is stored in an array
// After every click of a button (left or right) the function changes href values and starts Tiny Box once again
// with new settings
// Buttons are generated automatically when the funcion starts
// styles for buttons are in product-view.scss file -> look for #tnext and #tprev there

function enhanceLightboxGallery(){

    // temporary href for new image
    var aTempHref = null;
    // get the main box to add left and right buttons
    var aBox = document.getElementById('lightbox');

    // read elements
    readElements();

    // adds right and left buttons
    // they are hidden at first
    addRightButton(aBox,aContainer.length);
    addLeftButton(aBox);


    // check if a right button was clicked
    // and animate next image from
    // elements array using href value
    $(tnext).observe('click',function(){
        if(aCounter>=(aContainer.length-2)){
            document.getElementById('tnext').style.display='none';
        }
        if(aCounter>=(aContainer.length-1)){
            aCounter=aCounter;
        }else{
            aCounter++;

            document.getElementById('tprev').style.display='block';

            aTempHref = aContainer[aCounter].readAttribute('href');
            clearRemainingImageFirst(aBox);
            var anImage = document.createElement('img');
            anImage.setAttribute('src',aTempHref);
            anImage.setAttribute('id','superImage');
            aBox.childNodes[0].appendChild(anImage);
            $('superImage').fade({ duration: 1.0, from: 0, to: 1 });


        }
    })


    // check if a left button was clicked
    // and animate previous image from
    // elements array using href value
    $(tprev).observe('click',function(){
        if(aCounter==1){
            document.getElementById('tprev').style.display='none';
        }
        if(aCounter<=0){
            aCounter=aCounter;
        }else{
            aCounter--;

            document.getElementById('tnext').style.display='block';

            aTempHref = aContainer[aCounter].readAttribute('href');
            clearRemainingImageFirst(aBox);
            var anImage = document.createElement('img');
            anImage.setAttribute('src',aTempHref);
            anImage.setAttribute('id','superImage');
            aBox.childNodes[0].appendChild(anImage);
            $('superImage').fade({ duration: 1.0, from: 0, to: 1 });
        }
    })
}

// -----------------------------------------------------------------------------------



// -------------- reads every a element and push it to the container -----------------
function readElements(){
//clears old table at first
    aContainer.splice(0, aContainer.length);
// read every element with subimglist class
// and push it to the array
    for(var i=0; i<aElements.length; i++){
        var attrChecker = aElements[i].readAttribute('class');
        if(attrChecker==null) continue;
        attrChecker = attrChecker.toString();
        if(attrChecker.indexOf('subimglist')>=0){
            aContainer.push(aElements[i]);
        }
    }
}
// -----------------------------------------------------------------------------------



// --------------- Clears remaining image in lightbox window -------------------------
//
// Every time the user clicks the button left or right
// this function will delete the image which is already displaying
// before loading next one

function clearRemainingImageFirst(param){
    var aImgNode = param.childNodes[0].childNodes[0];
    param.childNodes[0].removeChild(aImgNode);
}

// -----------------------------------------------------------------------------------



// ---------------- Generates right button -------------------------------------------

function addRightButton(param, howmany){
    var aRight = document.createElement('span');
    //var aText = document.createTextNode('NEXT');
    //var innerSpan = document.createElement('span');
    //var innerText = document.createTextNode(' \u21D2');
    //innerSpan.appendChild(innerText);
    //aRight.appendChild(aText);
    //aRight.appendChild(innerSpan);
    aRight.setAttribute('id','tnext');
    param.appendChild(aRight);
    if(howmany>1 && aCounter<(howmany-1)){
        aRight.style.display = 'block';
    }
}

// -----------------------------------------------------------------------------------



// --------------- Generates left button ---------------------------------------------

function addLeftButton(param){
    var aLeft = document.createElement('span');
    //var aText = document.createTextNode('PREV');
    //var innerSpan = document.createElement('span');
    //var innerText = document.createTextNode('\u21D0 ');
    //innerSpan.appendChild(innerText);
    //aLeft.appendChild(innerSpan);
    //aLeft.appendChild(aText);
    aLeft.setAttribute('id','tprev');
    param.appendChild(aLeft);
    if(aCounter < 1){
        aLeft.style.display = 'none';
    }else{
        aLeft.style.display = 'block';
    }
}

// -----------------------------------------------------------------------------------



// --------------- Counter checks ----------------------------------------------------
//
// After the main function start then every time when user will close the lightbox window
// and starts the lightbox once again, this function will be executed
// it is checking the counter value after clicking the big box
// hides and shows buttons if needed (left and right)
function checkACounter(param){
    var howmany = param;
    if(howmany>1){
        if(aCounter < 1){
            document.getElementById('tprev').style.display = 'none';
            document.getElementById('tnext').style.display = 'block';
        }else if(howmany>1 && aCounter<(howmany-1)){
            document.getElementById('tprev').style.display = 'block';
            document.getElementById('tnext').style.display = 'block';
        }else{
            document.getElementById('tprev').style.display = 'block';
            document.getElementById('tnext').style.display = 'none';
        }
    }

}

// -----------------------------------------------------------------------------------



// ---------------- Calculate height of a window -------------------------------------

function getWindowHeight(){
    var myWidth = 0, myHeight = 0;
    if( typeof( window.innerWidth ) == 'number' ) {
        myWidth = window.innerWidth;
        myHeight = window.innerHeight;
    } else if( document.documentElement && ( document.documentElement.clientWidth || document.documentElement.clientHeight ) ) {
        myWidth = document.documentElement.clientWidth;
        myHeight = document.documentElement.clientHeight;
    }
    return myHeight;
}

// -----------------------------------------------------------------------------------